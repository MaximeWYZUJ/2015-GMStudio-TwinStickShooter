<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vaisseau</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Apparence
skin=4
image_speed=0
image_index=skin
arme_type=spr_bullet
arme=obj_bullet //bullet simple ou double ou lance flamme etc.
skin_arme=2 //image_index de arme_type (rose)

scr_dep=1
randomize()

config_tourelles=0 //config unidirectionnelle
config_deplacement="gauche" //gestion controlatérale des déplacements et des tirs

//Variables de vitesse
acc=0
step_count_acc=0
step_count_dec=0
vitesse_de_pointe=0
ralentisseur_angulaire=1
delta_angle=0
compteur_dash=0


ralentisseur=1 //intensité du ralentissement
buffer_ralentisseur=0 //si quelque chose affecte la vitesse -&gt; buffer_raentisseur=1


//Propriétés du vaisseau
vitesse = 0.3
poussee = 0.3
HP=10
shot_speed=40 //vitesse de déplacement des bullet
fire_rate=5
bullet_size=1
dash_propulsion=4

commerce=0
BUFFER_interface_vaisseau=0
global.current_conv=0

ydir=0
xdir=0

buffer_atk=0

global.xvaisseau=x
global.yvaisseau=y


//Marchandise
QTT_drogue[1]=2 //cf subimage de spr_drogue
QTT_drogue[2]=4
QTT_drogue[3]=6
QTT_drogue[4]=8

//Fuel
fuel=10000
maxfuel=10000
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if config_deplacement=="droit"

{
    bullet=instance_create(x+23*dcos(image_angle),y-23*dsin(image_angle),arme)
    bullet.image_angle=image_angle

    with(bullet)
    {
        move_towards_point(obj_vaisseau.x+23*dcos(image_angle)/*point d'origine*/+dcos(image_angle)/*direction*/, obj_vaisseau.y-23*dsin(image_angle)/*point d'origine*/-dsin(image_angle)/*direction*/, obj_vaisseau.shot_speed)
    }


alarm[2]=fire_rate

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if config_deplacement="double"
{

//=== Bullet gauche ===
bulletG=instance_create(x+30*dcos(114+image_angle),y-30*dsin(114+image_angle),obj_bullet)// 30=rayon du cercle trigo de centre 27;47 (origine du spr_vaisseau) et 114=angle entre vecteurU et vecteurOrigine-&gt;15;20 (création de bulletG)
bulletG.image_angle=point_direction(x, y, x+gamepad_axis_value(0, gp_axislh), y+gamepad_axis_value(0, gp_axislv))

with(bulletG)
{
    move_towards_point(obj_vaisseau.x+30*dcos(114+obj_vaisseau.image_angle)+gamepad_axis_value(0, gp_axislh), obj_vaisseau.y-30*dsin(114+obj_vaisseau.image_angle)+gamepad_axis_value(0, gp_axislv), obj_vaisseau.shot_speed)
}



//=== Bullet droit ===
bulletD=instance_create(x+30*dcos(246+image_angle),y-30*dsin(246+image_angle),obj_bullet)
bulletD.image_angle=point_direction(x, y, x+gamepad_axis_value(0, gp_axisrh), y+gamepad_axis_value(0, gp_axisrv))

with(bulletD)
{
    move_towards_point(obj_vaisseau.x+30*dcos(246+obj_vaisseau.image_angle)+gamepad_axis_value(0, gp_axisrh), obj_vaisseau.y-30*dsin(246+obj_vaisseau.image_angle)+gamepad_axis_value(0, gp_axisrv), obj_vaisseau.shot_speed)
}



alarm[1]=fire_rate

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if config_deplacement=="gauche"

{

    bullet=instance_create(x+23*dcos(image_angle),y-23*dsin(image_angle),arme)
    bullet.image_angle=image_angle

    with(bullet)
    {
        move_towards_point(obj_vaisseau.x+23*dcos(image_angle)/*point d'origine*/+dcos(image_angle)/*direction*/, obj_vaisseau.y-23*dsin(image_angle)/*point d'origine*/-dsin(image_angle)/*direction*/, obj_vaisseau.shot_speed)
    }


alarm[0]=fire_rate

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_axis_deadzone(0,0.15)
gamepad_set_button_threshold(0,0.5)

global.xvaisseau=x
global.yvaisseau=y

//===Vie===
if HP&lt;=0
{HP=0}

if fuel&gt;maxfuel
{fuel=maxfuel}
if fuel&lt;0
{fuel=0}

//===Délimitation de la variable de commerce===
if commerce&gt;1
commerce=0



if commerce==0 &amp;&amp; global.current_conv==0//On vérifie que le joueur ne oommerce pas avec une planète/station et qu'il n'est pas en pleine conversation
{
    
    //=== Réinitialisation du buffer d'attaque et des alarmes, en cas de changement de config déplacement ===
    if config_tourelles==1 //config multidirectionnelle
    {
        if gamepad_button_check_released(0, gp_shoulderlb) || gamepad_button_check_released(0, gp_shoulderrb)
        {
            buffer_atk=0
            alarm[0]=-1
            alarm[1]=-1
            alarm[2]=-1
        }
        
        //Conséquence du passage droit-&gt;gauche sur les tirs
        if config_deplacement=="gauche"
        {
            if gamepad_button_check(0, gp_shoulderlb)
            {buffer_atk=0; alarm[0]=-1}
        }
        
        //Conséquence du passage gauche-&gt;droit sur les tirs
        if config_deplacement=="droit"
        {
            if gamepad_button_check(0, gp_shoulderrb)
            {buffer_atk=0; alarm[2]=-1}
        }
    }
    
    if config_tourelles==0
    {
        scr_deplacement_unidirectionnel()
        scr_attaque_unidirectionnelle()
    }
    else //config_tourelles==1
    {
        scr_deplacement_multidirectionnel()
        scr_attaque_multidirectionnelle()
    }
    

    //===Interface du vaisseau===
    if gamepad_button_check_released(0, gp_face4)
    {
    if BUFFER_interface_vaisseau==0
        {instance_create(view_xview[0]+374,view_yview[0]+216,obj_vaisseau_fenetre) /*ouverture de la fenetre de la soute*/ ; BUFFER_interface_vaisseau=1}
    else {scr_destroy(obj_vaisseau_fenetre) ; BUFFER_interface_vaisseau=0}
    }

    
    //===Dash orthogonal===
    scr_dash_orthogonal()

}

else //commerce==1 ou global.current_conv==1
{
    hspeed=0
    vspeed=0
    buffer_atk=0
    alarm[0]=-1
    alarm[1]=-1
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//=== HUD ===
cible_proche= instance_nearest(x, y, obj_ennemy)

if cible_proche!=noone
{
    D= point_distance(x, y, cible_proche.x, cible_proche.y)

    if D&gt;512 //view_wview[0] / 2
    {
        draw_sprite_ext(spr_cible, 0, view_wport[0]/2, view_hport[0]/2, 1, 1, point_direction(x, y, (cible_proche).x, (cible_proche).y), c_white, 0.5)
        draw_text_colour(view_wport[0]/2+100, view_hport[0]/2, string(distance_to_object(cible_proche)), c_red,c_red,c_red,c_red, 1)
    }
}


//=== Configuration des tourelles ===
if instance_number(obj_interface)==0
{
    if config_tourelles==0 //unidirectionnel -&gt; multidirectionnel
    {
        if gamepad_button_check_released(0, gp_padu)
        {config_tourelles=1}
    }
    else if gamepad_button_check_released(0, gp_padd) //multidirectionnel -&gt; unidirectionnel
    {config_tourelles=0}
}


draw_text(100, 900, "Multidirectionnel")
draw_text(100, 950, "Unidirectionnel")
draw_text(75, 950-50*config_tourelles, "=&gt; ")


//draw_text_transformed_colour(50, 400, "dash_propulsion : " + string(dash_propulsion), 2, 2, 0, c_lime, c_lime, c_lime, c_lime, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_flamme_principale_courte, skin, x, y, 0.25+0.75*ralentisseur_angulaire*acc/(vitesse*10+10), 1, image_angle, c_white, 1)


draw_sprite_ext(spr_flamme_secondaireG_courte, skin, x, y, 0.25+0.75*ralentisseur_angulaire*acc/(vitesse*10+10) , 1, image_angle, c_white, 1)
draw_sprite_ext(spr_flamme_secondaireD_courte, skin, x, y, 0.25+0.75*ralentisseur_angulaire*acc/(vitesse*10+10) , 1, image_angle, c_white, 1)




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_vaisseau, skin, x, y, 1, 1, image_angle, c_white, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,20</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
